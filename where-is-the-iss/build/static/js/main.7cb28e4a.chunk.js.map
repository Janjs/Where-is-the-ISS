{"version":3,"sources":["dimensions.js","App.js","reportWebVitals.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","style","container","margin","title","color","marginBottom","map","fill","App","useState","issLoc","setIssLoc","isLoading","setLoading","useEffect","fetch","then","response","json","iss_position","catch","error","console","finally","log","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","className","geography","geographies","geo","rsmKey","coordinates","longitude","latitude","textAnchor","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAEA,SAASA,IAAuB,IAAD,EACsBC,OACnD,MAAO,CACLC,MAH2B,EACrBC,WAGNC,OAJ2B,EACFC,aAOtB,I,OC4CDC,EAAQ,CACZC,UAAW,CACTC,OAAQ,GAEVC,MAAO,CACLC,MAAO,UACPC,aAAc,GAEhBC,IAAK,CACHC,KAAM,YAIKC,EArDH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,OAEgBF,oBAAS,GAFzB,mBAETG,EAFS,KAEEC,EAFF,KAIhBC,qBAAU,WACRC,MAAM,2CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUP,EAAUO,EAAKC,iBAC9BC,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,MAC/BE,SAAQ,kBAAMV,GAAW,QAC3B,IAEHS,QAAQE,IAAId,GAZI,MDJiB,WAAO,IAAD,EACSD,mBAC9Cf,KAFqC,mBAChC+B,EADgC,KACdC,EADc,KAcvC,OATAZ,qBAAU,WACR,SAASa,IACPD,EAAoBhC,KAItB,OADAC,OAAOiC,iBAAiB,SAAUD,GAC3B,kBAAMhC,OAAOkC,oBAAoB,SAAUF,MACjD,IAEIF,ECImBK,GAAlBhC,EAdQ,EAcRA,OAAQF,EAdA,EAcAA,MAChB,OACE,sBAAKI,MAAOA,EAAMC,UAAW8B,UAAU,MAAvC,UACE,oBAAI/B,MAAOA,EAAMG,MAAjB,sEACES,GACA,8BACE,eAAC,gBAAD,CAAehB,MAAOA,EAAOE,OAAQA,EAAS,IAA9C,UACE,cAAC,cAAD,CAAakC,UAxBvB,yGAwB0ChC,MAAOA,EAAMM,IAA7C,SACG,qBAAG2B,YACU3B,KAAI,SAAC4B,GAAD,OACd,cAAC,YAAD,CAA4BF,UAAWE,GAAvBA,EAAIC,cAI1B,cAAC,SAAD,CAAQC,YAAa,CAAC1B,EAAO2B,UAAW3B,EAAO4B,UAA/C,SACE,sBAAMC,WAAW,SAASC,SAAU,GAApC,2CC/BCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7cb28e4a.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport const useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import './App.css';\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { useWindowDimensions } from \"./dimensions.js\"\nimport React, { useEffect, useState } from \"react\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n\nconst App = () => {\n  const [issLoc, setIssLoc] = useState({});\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(\"http://api.open-notify.org/iss-now.json\")\n      .then((response) => response.json())\n      .then((json) => setIssLoc(json.iss_position))\n      .catch((error) => console.error(error))\n      .finally(() => setLoading(false));\n  }, []);\n\n  console.log(issLoc)\n\n  const { height, width } = useWindowDimensions();\n  return (\n    <div style={style.container} className=\"App\">\n      <h1 style={style.title}>Here is where the ISS üõ∞Ô∏è is flying over</h1>\n      {!isLoading && (\n        <div>\n          <ComposableMap width={width} height={height - 100}>\n            <Geographies geography={geoUrl} style={style.map}>\n              {({ geographies }) =>\n                geographies.map((geo) => (\n                  <Geography key={geo.rsmKey} geography={geo} />\n                ))\n              }\n            </Geographies>\n            <Marker coordinates={[issLoc.longitude, issLoc.latitude]}>\n              <text textAnchor=\"middle\" fontSize={16}>\n                üõ∞Ô∏è\n              </text>\n            </Marker>\n          </ComposableMap>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst style = {\n  container: {\n    margin: 0,\n  },\n  title: {\n    color: \"#ffffff\",\n    marginBottom: 0,\n  },\n  map: {\n    fill: \"#0b3d91\",\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}